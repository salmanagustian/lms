import { IUnfilledAtt, Optional } from "@utils/base-class/base.interface";
import { AllowNull, BelongsToMany, Column, Default, HasMany, Model, Scopes, Table } from "sequelize-typescript";
import { Tier } from "./Tier";
import { LoyaltyTier } from "./LoyaltyTier";
import { MemberPointHistory } from "./MemberPointHistory";
import { Member } from "./Member";
import { MemberTier } from "./MemberTier";

export interface INullableAttr extends IUnfilledAtt {
  isActive: boolean;
}

interface IAutoGeneratedAttr {
  id: number;
}

export interface IModel extends Optional<INullableAttr>, IAutoGeneratedAttr {
  name: string;
  startDate: string;
  endDate: string;
}

export type IModelCreate = Omit<IModel, keyof IAutoGeneratedAttr> & Partial<IAutoGeneratedAttr>;

@Scopes(() => ({
  active: {
    where: {
      isActive: true
    }
  },
}))
@Table({
  tableName: 'loyalties',
  paranoid: true,
  indexes: [
    { fields: ['is_active'], where: { deleted_at: null }},
  ]
})
export class Loyalty extends Model<IModel, IModelCreate> implements IModel {
  declare id: number;

  @AllowNull(false)
  @Column
  declare name: string;

  @AllowNull(false)
  @Column
  declare startDate: string;

  @AllowNull(false)
  @Column
  declare endDate: string;

  @AllowNull(false)
  @Default(true)
  @Column
  declare isActive: boolean;

  @BelongsToMany(() => Tier, () => LoyaltyTier)
  declare tiers: Tier[];

  @BelongsToMany(() => Member, () => MemberTier)
  declare members: Member;
}