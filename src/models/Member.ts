import { IUnfilledAtt, Optional } from "@utils/base-class/base.interface";
import { AllowNull, BelongsTo, BelongsToMany, Column, Default, ForeignKey, HasMany, Model, Table } from "sequelize-typescript";
import { UserLogin } from "./UserLogin";
import { MemberPointHistory } from "./MemberPointHistory";
import { Loyalty } from "./Loyalty";
import { MemberTier } from "./MemberTier";

export interface INullableAttr extends IUnfilledAtt {
  address: string;
  isActive: boolean;
}

interface IAutoGeneratedAttr {
  id: number;
}

export interface IModel extends Optional<INullableAttr>, IAutoGeneratedAttr {
  userId: number;
  name: string;
  phoneNumber: string;
  birthDate: Date;
  joinDate: Date;
  earnedPoint: number;
  redeemedPoint: number;
  remainedPoint: number;
}

export type IModelCreate = Omit<IModel, keyof IAutoGeneratedAttr> & Partial<IAutoGeneratedAttr>;

@Table({
  tableName: 'members',
  paranoid: true,
  indexes: [
    { fields: ['is_active'], where: { deleted_at: null }},
  ]
})
export class Member extends Model<IModel, IModelCreate> implements IModel {
  declare id: number;

  @ForeignKey(() => UserLogin)
  @AllowNull(false)
  @Column
  declare userId: number;

  @AllowNull(false)
  @Column
  declare name: string;

  @AllowNull(false)
  @Column
  declare phoneNumber: string;
  
  @Column
  declare address: string;

  @AllowNull(false)
  @Column
  declare joinDate: Date;

  @AllowNull(false)
  @Column
  declare birthDate: Date;

  @AllowNull(false)
  @Default(0)
  @Column
  declare earnedPoint: number;

  @AllowNull(false)
  @Default(0)
  @Column
  declare remainedPoint: number;

  @AllowNull(false)
  @Default(0)
  @Column
  declare redeemedPoint: number;
  
  @AllowNull(false)
  @Default(true)
  @Column
  declare isActive: boolean;

  @BelongsTo(() => UserLogin)
  declare user: UserLogin;

  @HasMany(() => MemberPointHistory)
  declare pointHistories: MemberPointHistory;

  
  @BelongsToMany(() => Loyalty, () => MemberTier)
  declare loyalty: Loyalty;
}