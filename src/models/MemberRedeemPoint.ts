import { IUnfilledAtt, Optional } from "@utils/base-class/base.interface";
import { AllowNull, Column, DataType, Default, ForeignKey, HasMany, Model, Table } from "sequelize-typescript";
import { Loyalty } from "./Loyalty";
import { Member } from "./Member";

type INullableAttr = IUnfilledAtt;

interface IAutoGeneratedAttr {
  id: number;
}

export interface IModel extends Optional<INullableAttr>, IAutoGeneratedAttr {
  loyaltyId: number;
  memberId: number;
  redeemedPoint: number;
  transactionDate: Date;
}

export type IModelCreate = Omit<IModel, keyof IAutoGeneratedAttr> & Partial<IAutoGeneratedAttr>;

@Table({
  tableName: 'member_redeem_points',
  paranoid: true,
  indexes: [
    { fields: ['member_id'], where: { deleted_at: null }},
  ]
})
export class MemberRedeemPoint extends Model<IModel, IModelCreate> implements IModel {
  declare id: number;

  @ForeignKey(() => Loyalty)
  @AllowNull(false)
  @Column
  declare loyaltyId: number;

  @ForeignKey(() => Member)
  @AllowNull(false)
  @Column
  declare memberId: number;

  @AllowNull(false)
  @Column
  declare redeemedPoint: number
  
  @AllowNull(false)
  @Column
  declare transactionDate: Date;
}